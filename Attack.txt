import java.io.BufferedReader;
import java.io.InputStream;
import java.io.InputStreamReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Comparator;
import java.util.List;
import java.util.stream.Collectors;

class Player {
    List<Integer> attacks = new ArrayList<>();

    public Player(String[] stringAttacks) {
        for (int i = 0; i < 3; i++){
            attacks.add(Integer.parseInt(stringAttacks[i]));
        }

        sortAttacks();
    }

    private void sortAttacks(){
        this.attacks = this.attacks.stream().sorted().collect(Collectors.toList());
    }

    public List<Integer> getAttacks() {
        return attacks;
    }
}
class Game{
    Player player1;
    Player player2;

    public Game(Player player1, Player player2) {
        this.player1 = player1;
        this.player2 = player2;
    }
}
class insertGame {
    public static Game createGame(String line) {
        String[] parts = line.split(";"); //
        String[] player1Attacks = parts[0].split(" ");
        String[] player2Attacks = parts[1].split(" ");

        Player player1 = new Player(player1Attacks);
        Player player2 = new Player(player2Attacks);
        return new Game(player1, player2);
    }
}

class Risk {
    List<Game> games;
    int counter;
    public Risk() {
        this.games = new ArrayList<>();
        this.counter = 0;
    }

    public boolean playGame(Game game){
        List<Integer> player1Attacks = game.player1.getAttacks();
        List<Integer> player2Attacks = game.player2.getAttacks();

        boolean flag = true;
        for (int i = 0; i < player1Attacks.size(); i++){
            if (player1Attacks.get(i) <= player2Attacks.get(i)){
                flag = false;
                break;
            }
        }

        return flag;
    }
    public int processAttacksData(InputStream inputStream) {
        BufferedReader bufferedReader = new BufferedReader(new InputStreamReader(inputStream));
        this.games = bufferedReader.lines().map(insertGame::createGame).collect(Collectors.toList());

        this.games.stream().forEach(game -> {
            boolean flag = playGame(game);
            if (flag)
                this.counter++;
        });

        return this.counter;
    }
}

public class RiskTester {
    public static void main(String[] args) {

        Risk risk = new Risk();

        System.out.println(risk.processAttacksData(System.in));
    }
}