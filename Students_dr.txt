import java.util.*;
import java.util.stream.Collectors;

import static java.util.stream.Collectors.toList;

class NotValidPoints extends Exception {
    public NotValidPoints() {
    }
}

class Student {
    private final String  index;
    private final String name;
    private int midterm1;
    private int midterm2;
    private int labs;

    public Student(String index, String name) {
        this.index = index;
        this.name = name;
        this.midterm1 = 0;
        this.midterm2 = 0;
        this.labs = 0;
    }

    public String getIndex() {
        return index;
    }

    public void setMidterm1(int midterm1) {
        this.midterm1 = midterm1;
    }

    public void setMidterm2(int midterm2) {
        this.midterm2 = midterm2;
    }

    public void setLabs(int labs) {
        this.labs = labs;
    }

    public double getSumPoints() {
        return this.midterm1 * 0.45 + midterm2 * 0.45 + labs;
    }

    public int getGrade() {
        int grade = (int) (getSumPoints() / 10) + 1;
        if (grade < 5)
            grade = 5;
        else if (grade > 10)
            grade = 10;

        return grade;
    }

    @Override
    public String toString() {
        return String.format("ID: %s Name: %s First midterm: %d Second midterm %d Labs: %d Summary points: %.2f Grade: %d", this.index, this.name, this.midterm1, this.midterm2, this.labs, this.getSumPoints(), this.getGrade());
    }
}

class AdvancedProgrammingCourse {
    Map<String, Student> students;

    public AdvancedProgrammingCourse() {
        this.students = new HashMap<>();
    }

    public void addStudent(Student student) {
        this.students.put(student.getIndex(), student);
    }

    public void updateStudent(String idNumber, String activity, int points) throws NotValidPoints {
        if (points > 100 || points < 0)
            throw new NotValidPoints();

        Student wantedStudent = this.students.get(idNumber);
        if (activity.equals("midterm1"))
            wantedStudent.setMidterm1(points);
        else if (activity.equals("midterm2"))
            wantedStudent.setMidterm2(points);
        else if (activity.equals("labs"))
            wantedStudent.setLabs(points);

        this.students.put(wantedStudent.getIndex(), wantedStudent);
    }

    public List<Student> getFirstNStudents(int n) {
        return this.students.values().stream().sorted(Comparator.comparing(Student::getSumPoints).reversed()).limit(n).collect(toList());
    }

    public Map<Integer, Integer> getGradeDistribution() {
        Map<Integer, Integer> gradesCounter = new HashMap<>();
        for (int i = 5; i < 11; i++) {
            gradesCounter.put(i, 0);
        }

        List<Integer> grades = this.students.values().stream().map(Student::getGrade).collect(Collectors.toList());
        for (int grade : grades) {
            int counter = gradesCounter.get(grade) + 1;
            gradesCounter.put(grade, counter);
        }

        return gradesCounter;
    }

    public void printStatistics() {
        List<Double> points = new ArrayList<>();
        this.students.values().stream().filter(student -> student.getGrade() > 5).mapToDouble(Student::getSumPoints).forEach(points::add);
        int count = points.size();
        Double max = points.stream().mapToDouble(i -> i).max().orElse(-1.0);
        Double average = points.stream().mapToDouble(i -> i).average().orElse(-1.0);
        Double min = points.stream().mapToDouble(i -> i).min().orElse(-1.0);

        System.out.printf("Count: %d Min: %.2f Average: %.2f Max: %.2f\n", count, min, average, max);
    }
}

public class CourseTest {
    public static void printStudents(List<Student> students) {
        students.forEach(System.out::println);
    }

    public static void printMap(Map<Integer, Integer> map) {
        map.forEach((k, v) -> System.out.printf("%d -> %d%n", k, v));
    }

    public static void main(String[] args) {
        AdvancedProgrammingCourse advancedProgrammingCourse = new AdvancedProgrammingCourse();

        Scanner sc = new Scanner(System.in);

        while (sc.hasNextLine()) {
            String line = sc.nextLine();
            String[] parts = line.split("\\s+");

            String command = parts[0];

            if (command.equals("addStudent")) {
                String id = parts[1];
                String name = parts[2];
                advancedProgrammingCourse.addStudent(new Student(id, name));
            } else if (command.equals("updateStudent")) {
                String idNumber = parts[1];
                String activity = parts[2];
                int points = Integer.parseInt(parts[3]);
                try {
                    advancedProgrammingCourse.updateStudent(idNumber, activity, points);
                } catch (NotValidPoints e) {
                    System.out.println();
                }
            } else if (command.equals("getFirstNStudents")) {
                int n = Integer.parseInt(parts[1]);
                printStudents(advancedProgrammingCourse.getFirstNStudents(n));
            } else if (command.equals("getGradeDistribution")) {
                printMap(advancedProgrammingCourse.getGradeDistribution());
            } else {
                advancedProgrammingCourse.printStatistics();
            }
        }
    }
}
