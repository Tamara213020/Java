import java.util.*;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;


class Line implements Comparable<Line> {
    Double coeficient;
    Double x;
    Double intercept;

    public Line(Double coeficient, Double x, Double intercept) {
        this.coeficient = coeficient;
        this.x = x;
        this.intercept = intercept;
    }

    public static Line createLine(String line) {
        String[] parts = line.split("\\s+");
        return new Line(
                Double.parseDouble(parts[0]),
                Double.parseDouble(parts[1]),
                Double.parseDouble(parts[2])
        );
    }

    public double calculateLine() {
        return coeficient * x + intercept;
    }

    @Override
    public String toString() {
        return String.format("%.2f * %.2f + %.2f", coeficient, x, intercept);
    }

    @Override
    public int compareTo(Line o) {
        return this.x.compareTo(o.x);
    }
}

class Equation<IN, OUT> {
    Supplier<IN> supplier;
    Function<IN, OUT> function;

    public Equation(Supplier<IN> supplier, Function<IN, OUT> function) {
        this.supplier = supplier;
        this.function = function;
    }

    public Optional<OUT> calculate() {
        OUT result = this.function.apply(supplier.get());
        return Optional.of(result);
    }
}

class EquationProcessor {
    public static <IN, OUT> void process(List<IN> in, List<Equation<IN, OUT>> equations) {
        List<String> input = new ArrayList<>();
        List<String> result = new ArrayList<>();
        for (IN element : in) {
            input.add(String.format("Input: %s", element.toString()));

            for (Equation<IN, OUT> equation : equations) {
                result.add(String.format("Result: %s", equation.calculate().get()));
            }
        }
        
        for (String str : input){
            System.out.println(str);
        }

        System.out.println(result.get(0));
        System.out.println(result.get(1));
    }
}

public class EquationTester {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int testCase = Integer.parseInt(sc.nextLine());

        if (testCase == 1) { // Testing with Integer, Integer
            List<Equation<Integer, Integer>> equations1 = new ArrayList<>();
            List<Integer> inputs = new ArrayList<>();
            while (sc.hasNext()) {
                inputs.add(Integer.parseInt(sc.nextLine()));
            }

            // TODO: Add an equation where you get the 3rd integer from the inputs list, and the result is the sum of that number and the number 1000.
            Supplier<Integer> supplier = () -> inputs.get(2);
            Function<Integer, Integer> function = element -> element + 1000;
            equations1.add(new Equation<>(supplier, function));

            // TODO: Add an equation where you get the 4th integer from the inputs list, and the result is the maximum of that number and the number 100.
            supplier = () -> inputs.get(3);
            function = element -> Math.max(element, 100);
            equations1.add(new Equation<>(supplier, function));

            EquationProcessor.process(inputs, equations1);

        } else { // Testing with Line, Integer
            List<Equation<Line, Double>> equations2 = new ArrayList<>();
            List<Line> inputs = new ArrayList<>();
            while (sc.hasNext()) {
                inputs.add(Line.createLine(sc.nextLine()));
            }

            //TODO Add an equation where you get the 2nd line, and the result is the value of y in the line equation.
            Supplier<Line> supplier = () -> inputs.get(1);
            Function<Line, Double> function = element -> element.calculateLine();
            equations2.add(new Equation<>(supplier, function));

            //TODO Add an equation where you get the 1st line, and the result is the sum of all y values for all lines that have a greater y value than that equation.
            supplier = () -> inputs.get(0);
            function = element -> inputs.stream().filter(line -> line.calculateLine() > element.calculateLine()).mapToDouble(Line::calculateLine).sum();
            equations2.add(new Equation<>(supplier, function));

            EquationProcessor.process(inputs, equations2);
        }
    }
}
