import java.sql.Timestamp;
import java.time.LocalDate;
import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;
class NonExistingItemException extends Exception{
    public NonExistingItemException(int id) {
        super(String.format("Item with id %d doesn't exist",id));
    }
}
abstract class Archive {
    protected int id;
    protected LocalDate dateArchived;

    public Archive(int id) {
        this.id = id;
    }

    public void setDateArchived(LocalDate dateArchived) {
        this.dateArchived = dateArchived;
    }

    abstract public String getType();

    public int getId() {
        return id;
    }

    public LocalDate getDateArchived() {
        return dateArchived;
    }
}

class LockedArchive extends Archive {
    LocalDate dateToOpen; //датум до кој не смее да се отвори

    public LockedArchive(int id, LocalDate dateToOpen) {
        super(id);
        this.dateToOpen = dateToOpen;
    }

    public LocalDate getDateToOpen() {
        return dateToOpen;
    }

    @Override
    public String getType() {
        return "locked";
    }
}

class SpecialArchive extends Archive {
    int maxOpen;
    int counterOpen;

    public SpecialArchive(int id, int maxOpen) {
        super(id);
        this.maxOpen = maxOpen;
        this.counterOpen = 0;
    }

    public int getMaxOpen() {
        return maxOpen;
    }

    public int getCounterOpen() {
        return counterOpen;
    }

    public void updateCounter() {
        this.counterOpen += 1;
    }

    @Override
    public String getType() {
        return "special";
    }
}

class ArchiveStore {
    List<Archive> archiveList;
    StringBuilder stringBuilder;

    public ArchiveStore() {
        this.archiveList = new ArrayList<>();
        this.stringBuilder = new StringBuilder();
    }


    public void archiveItem(Archive item, LocalDate date) {
        item.setDateArchived(date);
        this.archiveList.add(item);
        stringBuilder.append(String.format("Item %d archived at %s\n", item.getId(), date));
    }

    void openItem(int id, LocalDate date) throws NonExistingItemException {
        Archive target = null;
        for (Archive archive : this.archiveList){
            if (archive.getId() == id && archive.getDateArchived().equals(date))
                target = archive;
        }

        if (target == null)
            throw new NonExistingItemException(id);

        if (target.getType().equals("special")){
            SpecialArchive specialArchive = (SpecialArchive) target;
            if (specialArchive.getMaxOpen() <= specialArchive.counterOpen)
                stringBuilder.append(String.format("Item %d cannot be opened more than %d times\n", specialArchive.getId(), specialArchive.getMaxOpen()));
            else {
                stringBuilder.append(String.format("Item %d opened at %s\n", specialArchive.getId(), specialArchive.getDateArchived().toString()));
                specialArchive.updateCounter();
            }
            this.archiveList.remove(target);
            this.archiveList.add(specialArchive);
        } else {
            LockedArchive lockedArchive = (LockedArchive) target;
            if (lockedArchive.getDateToOpen().isAfter(date))
                stringBuilder.append(String.format("Item %d cannot be opened before %s\n", lockedArchive.getId(), lockedArchive.getDateToOpen().toString()));
            else {
                stringBuilder.append(String.format("Item %d opened at %s\n", lockedArchive.getId(), lockedArchive.getDateArchived().toString()));
            }
            this.archiveList.remove(target);
            this.archiveList.add(lockedArchive);
        }
    }

    public String getLog(){
        return stringBuilder.toString();
    }
}

public class ArchiveStoreTest {
    public static void main(String[] args) {
        ArchiveStore store = new ArchiveStore();
        LocalDate date = LocalDate.of(2013, 10, 7);
        Scanner scanner = new Scanner(System.in);
        scanner.nextLine();
        int n = scanner.nextInt();
        scanner.nextLine();
        scanner.nextLine();
        int i;
        for (i = 0; i < n; ++i) {
            int id = scanner.nextInt();
            long days = scanner.nextLong();

            LocalDate dateToOpen = date.atStartOfDay().plusSeconds(days * 24 * 60 * 60).toLocalDate();
            LockedArchive lockedArchive = new LockedArchive(id, dateToOpen);
            store.archiveItem(lockedArchive, date);
        }
        scanner.nextLine();
        scanner.nextLine();
        n = scanner.nextInt();
        scanner.nextLine();
        scanner.nextLine();
        for (i = 0; i < n; ++i) {
            int id = scanner.nextInt();
            int maxOpen = scanner.nextInt();
            SpecialArchive specialArchive = new SpecialArchive(id, maxOpen);
            store.archiveItem(specialArchive, date);
        }
        scanner.nextLine();
        scanner.nextLine();
        while(scanner.hasNext()) {
            int open = scanner.nextInt();
            try {
                store.openItem(open, date);
            } catch(NonExistingItemException e) {
                System.out.println(e.getMessage());
            }
        }
        System.out.println(store.getLog());
    }
}



