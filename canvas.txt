import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;
import java.util.stream.Collectors;
import java.util.stream.Stream;

enum Color {
    RED, GREEN, BLUE
}

public class ShapesTest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        Canvas canvas = new Canvas();
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            String[] parts = line.split(" ");
            int type = Integer.parseInt(parts[0]);
            String id = parts[1];
            if (type == 1) {
                Color color = Color.valueOf(parts[2]);
                float radius = Float.parseFloat(parts[3]);
                canvas.add(id, color, radius);
            } else if (type == 2) {
                Color color = Color.valueOf(parts[2]);
                float width = Float.parseFloat(parts[3]);
                float height = Float.parseFloat(parts[4]);
                canvas.add(id, color, width, height);
            } else if (type == 3) {
                float scaleFactor = Float.parseFloat(parts[2]);
                System.out.println("ORIGNAL:");
                System.out.print(canvas);
                canvas.scale(id, scaleFactor);
                System.out.printf("AFTER SCALING: %s %.2f\n", id, scaleFactor);
                System.out.print(canvas);
            }

        }
    }
}

interface Scalable {
    void scale(float scaleFactor);
}

interface Stackable {
    float weight();
}

abstract class Shape implements Scalable, Stackable {
    protected String id;
    protected Color color;
    Comparator<Shape> COMPARATOR = Comparator.comparing(Shape::weight).reversed();

    public Shape(String id, Color color) {
        this.id = id;
        this.color = color;
    }

    public abstract float weight();

    public String getId() {
        return id;
    }
}

class Circle extends Shape{
    private float radius;

    public Circle(String id, Color color, float radius) {
        super(id, color);
        this.radius = radius;
    }

    @Override
    public void scale(float scaleFactor) {
        this.radius *= scaleFactor;
    }

    @Override
    public float weight() {
        return (float) (Math.PI * Math.pow(this.radius, 2));
    }

    @Override
    public String toString() {
        return String.format("C: %-5s%-10s%10.2f\n", this.id, this.color, this.weight());
    }
}

class Rectangle extends Shape{
    private float width;
    private float height;

    public Rectangle(String id, Color color, float width, float height) {
        super(id, color);
        this.width = width;
        this.height = height;
    }

    @Override
    public void scale(float scaleFactor) {
        this.width *= scaleFactor;
        this.height *= scaleFactor;
    }

    @Override
    public float weight() {
        return this.height * this.width;
    }

    @Override
    public String toString() {
        return String.format("R: %-5s%-10s%10.2f\n", this.id, this.color, this.weight());
    }
}

class Canvas {
    private List<Shape> shapeList;

    public Canvas() {
        this.shapeList = new ArrayList<>();
    }

    public void add(String id, Color color, float radius) { //krug
        this.shapeList.add(new Circle(id, color, radius));
    }
    public void add(String id, Color color, float width, float height) {//pravoagolnik
        this.shapeList.add(new Rectangle(id, color, width, height));
    }
    public void scale(String id, float scaleFactor) {
        List<Shape> shape = this.shapeList.stream()
                .filter(e -> e.getId().equals(id))
                .collect(Collectors.toList());

        Shape wantedShape = shape.get(0);
        wantedShape.scale(scaleFactor);

        int index = -1;
        for (int i = 0; i < this.shapeList.size(); i++){
            if (wantedShape.getId().equals(this.shapeList.get(i).getId()))
                index = i;
        }

        this.shapeList.remove(index);
        this.shapeList.add(wantedShape);
        this.shapeList = this.shapeList.stream()
                .sorted(Comparator.comparing(Shape::weight).reversed())
                .collect(Collectors.toList());
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder();
        this.shapeList = this.shapeList.stream()
                .sorted(Comparator.comparing(Shape::weight).reversed())
                .collect(Collectors.toList());
        for (Shape shape : this.shapeList) {
            sb.append(shape);
        }
        return sb.toString();
    }
}
