import java.util.*;
import java.util.stream.Collectors;

class Car {
    String manufacturer;
    String model;
    int price;
    float power;

    public Car(String manufacturer, String model, int price, float power) {
        this.manufacturer = manufacturer;
        this.model = model;
        this.price = price;
        this.power = power;
    }

    public String getManufacturer() {
        return manufacturer;
    }

    public String getModel() {
        return model;
    }

    public int getPrice() {
        return price;
    }

    public float getPower() {
        return power;
    }

    @Override
    public String toString() {
        return String.format("%s %s (%dKW) %d", this.manufacturer, this.model, (int) this.power, this.price);
    }
}

class CarCollection {
    Map<String, List<Car>> cars;
    List<Car> carsList;
    Comparator<Car> defaultComparator = Comparator.comparing(Car::getPrice).thenComparing(Car::getPower);

    public CarCollection() {
        this.cars = new TreeMap<>();
        this.carsList = new LinkedList<>();
    }

    public void addCar(Car car) {
        this.cars.putIfAbsent(car.getManufacturer(), new ArrayList<>());
        this.cars.get(car.manufacturer).add(car);

        this.carsList.add(car);
    }


    public void sortByPrice(boolean ascending) {
        this.cars.forEach((manufacturer, carList) -> {
            if (ascending) {
                carList.sort(defaultComparator);
                this.cars.put(manufacturer, carList);
            } else {
                carList.sort(defaultComparator.reversed());
                this.cars.put(manufacturer, carList);
            }
        });
    }

    public void sortByPrice1(boolean ascending) {
        if (ascending)
            this.carsList = this.carsList.stream().sorted(Comparator.comparing(Car::getPrice).thenComparing(Car::getPower)).collect(Collectors.toList());
        else
            this.carsList = this.carsList.stream().sorted(Comparator.comparing(Car::getPrice).thenComparing(Car::getPower).reversed()).collect(Collectors.toList());
    }


    public List<Car> filterByManufacturer(String manufacturer) {
        String name;
        if (manufacturer.equalsIgnoreCase("vw")) {
            name = manufacturer.toUpperCase();
        } else name = Character.toUpperCase(manufacturer.charAt(0)) + manufacturer.substring(1).toLowerCase();
        return this.cars.get(name).stream().sorted(Comparator.comparing(Car::getModel)).collect(Collectors.toList());
    }

    public List<Car> getList() {
        return this.cars.values().stream().flatMap(List::stream).collect(Collectors.toList());
    }

    public List<Car> getList1() {
        return this.carsList;
    }
}

public class CarTest {
    public static void main(String[] args) {
        CarCollection carCollection = new CarCollection();
        String manufacturer = fillCollection(carCollection);
        carCollection.sortByPrice1(true);
        System.out.println("=== Sorted By Price ASC ===");
        print(carCollection.getList1());
        carCollection.sortByPrice1(false);
        System.out.println("=== Sorted By Price DESC ===");
        print(carCollection.getList1());
        System.out.printf("=== Filtered By Manufacturer: %s ===\n", manufacturer);
        List<Car> result = carCollection.filterByManufacturer(manufacturer);
        print(result);
    }

    static void print(List<Car> cars) {
        for (Car c : cars) {
            System.out.println(c);
        }
    }

    static String fillCollection(CarCollection cc) {
        Scanner scanner = new Scanner(System.in);
        while (scanner.hasNext()) {
            String line = scanner.nextLine();
            String[] parts = line.split(" ");
            if (parts.length < 4) return parts[0];
            Car car = new Car(parts[0], parts[1], Integer.parseInt(parts[2]),
                    Float.parseFloat(parts[3]));
            cc.addCar(car);
        }
        scanner.close();
        return "";
    }
}


