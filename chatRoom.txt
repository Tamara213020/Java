import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.*;
import java.util.TreeSet;
import java.util.stream.Collectors;

class NoSuchRoomException extends Exception {
    public NoSuchRoomException(String message) {
        super(message);
    }
}

class NoSuchUserException extends Exception {
    public NoSuchUserException(String message) {
        super(message);
    }
}

class ChatRoom {
    String roomName;
    Set<String> users;

    public ChatRoom(String roomName) {
        this.roomName = roomName;
        this.users = new TreeSet<>();
    }


    public void addUser(String username) {
        this.users.add(username);
    }

    public void removeUser(String username) {
        this.users.remove(username);
    }

    public boolean hasUser(String username) {
        return this.users.contains(username);
    }

    public int numUsers() {
        return this.users.size();
    }

    public String getRoomName() {
        return roomName;
    }

    public Set<String> getUsers() {
        return users;
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();
        stringBuilder.append(this.roomName).append("\n");
        if (this.users.size() == 0)
            stringBuilder.append("EMPTY").append("\n");
        else {
            for (String str : this.users) {
                stringBuilder.append(str).append("\n");
            }
        }

        return stringBuilder.toString();
    }
}

class ChatSystem {
    Map<String, ChatRoom> chatRooms;
    List<String> usersInSystem;

    public ChatSystem() {
        this.chatRooms = new TreeMap<>();
        this.usersInSystem = new ArrayList<>();
    }

    public void addRoom(String roomName) {
        this.chatRooms.put(roomName, new ChatRoom(roomName));
    }

    public void removeRoom(String roomName) {
        this.chatRooms.remove(roomName);
    }

    public ChatRoom getRoom(String roomName) throws NoSuchRoomException {
        if (this.chatRooms.containsKey(roomName))
            return this.chatRooms.get(roomName);
        else throw new NoSuchRoomException(roomName);
    }

    public void register(String userName) {
        this.usersInSystem.add(userName);
        int minSize = Integer.MAX_VALUE;
        List<ChatRoom> nameOfPotenitalRooms = new ArrayList<>();
        List<ChatRoom> tempChatRooms = this.chatRooms.values().stream().collect(Collectors.toList());
        for (ChatRoom chatRoom : tempChatRooms) {
            if (chatRoom.numUsers() < minSize)
                minSize = chatRoom.numUsers();
        }

        int finalMinSize = minSize;
        nameOfPotenitalRooms = this.chatRooms.values().stream().filter(chatRoom -> chatRoom.numUsers() == finalMinSize).sorted(Comparator.comparing(ChatRoom::getRoomName)).collect(Collectors.toList());
        nameOfPotenitalRooms.get(0).addUser(userName);
        this.chatRooms.put(nameOfPotenitalRooms.toString(), nameOfPotenitalRooms.get(0));
    }

    public void registerAndJoin(String userName, String roomName) {
        this.usersInSystem.add(userName);
        this.chatRooms.get(roomName).addUser(userName);
    }

    public void joinRoom(String userName, String roomName) throws NoSuchUserException, NoSuchRoomException {
        checkForRoomUsername(userName, roomName);

        this.chatRooms.get(roomName).addUser(userName);
    }

    public void leaveRoom(String userName, String roomName) throws NoSuchUserException, NoSuchRoomException {
        checkForRoomUsername(userName, roomName);

        this.chatRooms.get(roomName).removeUser(userName);
    }

    public void checkForRoomUsername(String userName, String roomName) throws NoSuchUserException, NoSuchRoomException {
        if (!this.usersInSystem.contains(userName))
            throw new NoSuchUserException(userName);
        if (!this.chatRooms.containsKey(roomName))
            throw new NoSuchRoomException(roomName);
    }

    public void followFriend(String userName, String friend_username) throws NoSuchUserException {
        if (!this.usersInSystem.contains(friend_username))
            throw new NoSuchUserException(friend_username);

        this.chatRooms.values().stream().filter(chatRoom -> chatRoom.hasUser(friend_username)).forEach(chatRoom -> chatRoom.addUser(userName));
    }
}

public class ChatSystemTest {

    public static void main(String[] args) throws IllegalArgumentException, IllegalAccessException, InvocationTargetException, NoSuchRoomException {
        Scanner jin = new Scanner(System.in);
        int k = jin.nextInt();
        if ( k == 0 ) {
            ChatRoom cr = new ChatRoom(jin.next());
            int n = jin.nextInt();
            for ( int i = 0 ; i < n ; ++i ) {
                k = jin.nextInt();
                if ( k == 0 ) cr.addUser(jin.next());
                if ( k == 1 ) cr.removeUser(jin.next());
                if ( k == 2 ) System.out.println(cr.hasUser(jin.next()));
            }
            System.out.println("");
            System.out.println(cr.toString());
            n = jin.nextInt();
            if ( n == 0 ) return;
            ChatRoom cr2 = new ChatRoom(jin.next());
            for ( int i = 0 ; i < n ; ++i ) {
                k = jin.nextInt();
                if ( k == 0 ) cr2.addUser(jin.next());
                if ( k == 1 ) cr2.removeUser(jin.next());
                if ( k == 2 ) cr2.hasUser(jin.next());
            }
            System.out.println(cr2.toString());
        }
        if ( k == 1 ) {
            ChatSystem cs = new ChatSystem();
            Method mts[] = cs.getClass().getMethods();
            while ( true ) {
                String cmd = jin.next();
                if ( cmd.equals("stop") ) break;
                if ( cmd.equals("print") ) {
                    System.out.println(cs.getRoom(jin.next())+"\n");continue;
                }
                for ( Method m : mts ) {
                    if ( m.getName().equals(cmd) ) {
                        String params[] = new String[m.getParameterTypes().length];
                        for ( int i = 0 ; i < params.length ; ++i ) params[i] = jin.next();
                        m.invoke(cs,params);
                    }
                }
            }
        }
    }

}