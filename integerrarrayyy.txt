import java.io.*;
import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

final class IntegerArray {
    private final int[] array;

    public IntegerArray(int a[]){
        this.array = a;
    }

    public int length(){
        return this.array.length;
    }

    public int getElementAt(int i){
        List<Integer> list = Arrays.stream(this.array)
                .boxed().collect(Collectors.toList());

        return (int) list.get(i);
    }

    public int sum() {
        return Arrays.stream(this.array).sum();
    }

    public double average(){
        return Arrays.stream(this.array)
                .boxed().collect(Collectors.toList())
                .stream().mapToDouble(i -> (double) i)
                .average().orElse(-1);
    }

    public IntegerArray getSorted(){
        int[] newArr = Arrays.stream(this.array)
                .sorted()
                .toArray();

        return new IntegerArray(newArr);
    }

    public IntegerArray concat(IntegerArray ia){
        List<Integer> concatList = new ArrayList<>();

        Arrays.stream(this.array).forEach(concatList::add);// BOXED!!!!!!!!!!!
        Arrays.stream(ia.getArray()).forEach(concatList::add);// BOXED!!!!!!!!!!!

        int[] newArr = concatList.stream()
                .mapToInt(Integer::intValue) // Convert Integer to int
                .toArray();

        return new IntegerArray(newArr);
    }

    @Override
    public String toString() { // [2, 1, 4]
        List<Integer> list = Arrays.stream(this.array).boxed().collect(Collectors.toList());

        StringBuilder stringBuilder = new StringBuilder();

        stringBuilder.append(String.format("[%d", list.get(0)));
        list.stream().skip(1).forEach(number -> {
            stringBuilder.append(String.format(", %d", number));
        });
        stringBuilder.append("]");

        return stringBuilder.toString();
    }

    public int[] getArray() {
        return this.array;
    }

    public boolean equals(IntegerArray other) {
        List<Integer> first = Arrays.stream(this.array).boxed().collect(Collectors.toList());
        List<Integer> second = Arrays.stream(other.getArray()).boxed().collect(Collectors.toList());

        if (first.size() != second.size())
            return false;

        for (int i = 0; i < first.size(); i++){
            if(!(first.get(i).equals(second.get(i))))
                return false;
        }

        return true;
    }
}

class ArrayReader {
    public static IntegerArray readIntegerArray(InputStream input) {
        Scanner scanner = new Scanner(input);

        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; ++i) {
            a[i] = scanner.nextInt();
        }

        return new IntegerArray(a);
    }
}


public class IntegerArrayTester {

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String s = scanner.nextLine();
        IntegerArray ia = null;
        switch (s) {
            case "testSimpleMethods":
                ia = new IntegerArray(generateRandomArray(scanner.nextInt()));
                testSimpleMethods(ia);
                break;
            case "testConcat":
                testConcat(scanner);
                break;
            case "testEquals":
                testEquals(scanner);
                break;
            case "testSorting":
                testSorting(scanner);
                break;
            case "testReading":
                testReading(new ByteArrayInputStream(scanner.nextLine().getBytes()));
                break;
            case "testImmutability":
                int a[] = generateRandomArray(scanner.nextInt());
                ia = new IntegerArray(a);
                testSimpleMethods(ia);
                testSimpleMethods(ia);
                IntegerArray sorted_ia = ia.getSorted();
                testSimpleMethods(ia);
                testSimpleMethods(sorted_ia);
                sorted_ia.getSorted();
                testSimpleMethods(sorted_ia);
                testSimpleMethods(ia);
                a[0] += 2;
                testSimpleMethods(ia);
                ia = ArrayReader.readIntegerArray(new ByteArrayInputStream(integerArrayToString(ia).getBytes()));
                testSimpleMethods(ia);
                break;
        }
        scanner.close();
    }

    static void testReading(InputStream in) {
        IntegerArray read = ArrayReader.readIntegerArray(in);
        System.out.println(read);
    }

    static void testSorting(Scanner scanner) {
        int[] a = readArray(scanner);
        IntegerArray ia = new IntegerArray(a);
        System.out.println(ia.getSorted());
    }

    static void testEquals(Scanner scanner) {
        int[] a = readArray(scanner);
        int[] b = readArray(scanner);
        int[] c = readArray(scanner);
        IntegerArray ia = new IntegerArray(a);
        IntegerArray ib = new IntegerArray(b);
        IntegerArray ic = new IntegerArray(c);
        System.out.println(ia.equals(ib));
        System.out.println(ia.equals(ic));
        System.out.println(ib.equals(ic));
    }

    static void testConcat(Scanner scanner) {
        int[] a = readArray(scanner);
        int[] b = readArray(scanner);
        IntegerArray array1 = new IntegerArray(a);
        IntegerArray array2 = new IntegerArray(b);
        IntegerArray concatenated = array1.concat(array2);
        System.out.println(concatenated);
    }

    static void testSimpleMethods(IntegerArray ia) {
        System.out.print(integerArrayToString(ia));
        System.out.println(ia);
        System.out.println(ia.sum());
        System.out.printf("%.2f\n", ia.average());
    }


    static String integerArrayToString(IntegerArray ia) {
        StringBuilder sb = new StringBuilder();
        sb.append(ia.length()).append('\n');
        for (int i = 0; i < ia.length(); ++i)
            sb.append(ia.getElementAt(i)).append(' ');
        sb.append('\n');
        return sb.toString();
    }

    static int[] readArray(Scanner scanner) {
        int n = scanner.nextInt();
        int[] a = new int[n];
        for (int i = 0; i < n; ++i) {
            a[i] = scanner.nextInt();
        }
        return a;
    }


    static int[] generateRandomArray(int k) {
        Random rnd = new Random(k);
        int n = rnd.nextInt(8) + 2;
        int a[] = new int[n];
        for (int i = 0; i < n; ++i) {
            a[i] = rnd.nextInt(20) - 5;
        }
        return a;
    }

}
