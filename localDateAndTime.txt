/*

Да се имплементира класа FileSystem за едноставен податочен систем. За вашиот податочен систем треба да имплементирате сопствена класа за датотека File со податоци за име (String), големина (Integer) и време на креирање (LocalDateTime) Класата треба да ги овозможува следните функционалности:

public void addFile(char folder, String name, int size, LocalDateTime createdAt) - метод за додавање нова датотека File во фолдер со даденото име (името на фолдерот е еден знак, може да биде . или голема буква)
public List<File> findAllHiddenFilesWithSizeLessThen(int size) - враќа листа на сите скриени датотеки (тоа се датотеки чие што име започнува со знакот за точка .) со големина помала од size.
public int totalSizeOfFilesFromFolders(List<Character> folders) - враќа вкупна големина на сите датотеки кои се наоѓаат во фолдерите кои се зададени во листата folders
public Map<Integer, Set<File>> byYear() - враќа мапа Map во која за датотеките се групирани според годината на креирање.
public Map<String, Long> sizeByMonthAndDay() - враќа мапа Map во која за секој месец и ден (независно од годината) се пресметува вкупната големина на сите датотеки креирани во тој месец и тој ден. Месецот се добива со повик на методот getMonth(), а денот getDayOfMonth().
Датотеките во секој фолдер се подредени според датумот на креирање во растечки редослед, потоа според името лексикографски и на крај според големината. Да се имплементира ваков компаратор во самата класа File. Исто така да се имплементира и toString репрезентација во следниот формат:

%-10[name] %5[size]B %[createdAt]

*/

import java.time.LocalDateTime;
import java.util.*;
import java.util.stream.Collectors;
import java.util.Objects;
import java.util.*;

class File implements Comparable<File>{

    private String name;
    private int size;
    private LocalDateTime timeOfCreation;

    public File(String name, int size, LocalDateTime timeOfCreation) {
        this.name = name;
        this.size = size;
        this.timeOfCreation = timeOfCreation;
    }

    public String getName() {
        return name;
    }

    public int getSize() {
        return size;
    }

    public LocalDateTime getTimeOfCreation() {
        return timeOfCreation;
    }

    public int getYear(){
        return this.timeOfCreation.getYear();
    }

    public int getDayOfYear(){
        return this.timeOfCreation.getDayOfYear();
    }

    public String getKeyDayOfYear(){
        return this.timeOfCreation.getMonth() + "-" + this.timeOfCreation.getDayOfMonth();
    }

    @Override
    public boolean equals(Object o) {
        if (this == o) return true;
        if (o == null || getClass() != o.getClass()) return false;
        File file = (File) o;
        return size == file.size &&
                name.equals(file.name) &&
                timeOfCreation.equals(file.timeOfCreation);
    }

    @Override
    public int hashCode() {
        return Objects.hash(name, size, timeOfCreation);
    }

    @Override
    public int compareTo(File o) {
        int dates = this.timeOfCreation.compareTo(o.timeOfCreation);
        if (dates == 0){
            int name = this.name.compareTo(o.name);
            if(name == 0)
                return Integer.compare(this.size, o.size);
            return name;
        }
        return dates;
    }
    
    @Override
    public String toString() {
        return String.format("%-10s %5dB %s", this.name, this.size, this.timeOfCreation);
    }
}

class FileSystem {

    private HashMap<Character, TreeSet<File>> folders;

    public FileSystem() {
        this.folders = new HashMap<>();
    }

    public void addFile(char folder, String name, int size, LocalDateTime createdAt){
        this.folders.compute(folder, (key, value) -> {
            if(value == null)
                value = new TreeSet<>();
            value.add(new File(name, size, createdAt));
            return value;
        });
    }

    public List<File> findAllHiddenFilesWithSizeLessThen(int size){
        return this.folders.values().stream()
                .flatMap(Collection::stream)
                .filter(file -> file.getName().startsWith(".") && file.getSize() < size)
                .collect(Collectors.toList());
    }

    public int totalSizeOfFilesFromFolders(List<Character> folders){
        return folders.stream()
                .map(folder -> this.folders.get(folder))
                .flatMap(Collection::stream)
                .mapToInt(File::getSize)
                .sum();
    }

    public Map<Integer, Set<File>> byYear(){
        return this.folders.values().stream()
                .flatMap(Collection::stream)
                .collect(Collectors.groupingBy(File::getYear, Collectors.toSet()));
    }

    public Map<String, Long> sizeByMonthAndDay(){
        Map<String, List<File>> dayOfYear = this.folders.values().stream()
                .flatMap(Collection::stream)
                .collect(Collectors.groupingBy(File::getKeyDayOfYear));
        
        return dayOfYear.values().stream()
                .collect(Collectors.toMap(list -> list.get(0).getKeyDayOfYear(), list -> list.stream().mapToLong(File::getSize).sum()));
    }
}

public class FileSystemTest {
    public static void main(String[] args) {
       	FileSystem fileSystem = new FileSystem();
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        for (int i = 0; i < n; i++) {
            String line = scanner.nextLine();
            String[] parts = line.split(":");
            fileSystem.addFile(parts[0].charAt(0), parts[1],
                    Integer.parseInt(parts[2]),
                    LocalDateTime.of(2016, 12, 29, 0, 0, 0).minusDays(Integer.parseInt(parts[3]))
            );
        }
        int action = scanner.nextInt();
        if (action == 0) {
            scanner.nextLine();
            int size = scanner.nextInt();
            System.out.println("== Find all hidden files with size less then " + size);
            List<File> files = fileSystem.findAllHiddenFilesWithSizeLessThen(size);
            files.forEach(System.out::println);
        } else if (action == 1) {
            scanner.nextLine();
            String[] parts = scanner.nextLine().split(":");
            System.out.println("== Total size of files from folders: " + Arrays.toString(parts));
            int totalSize = fileSystem.totalSizeOfFilesFromFolders(Arrays.stream(parts)
                    .map(s -> s.charAt(0))
                    .collect(Collectors.toList()));
            System.out.println(totalSize);
        } else if (action == 2) {
            System.out.println("== Files by year");
            Map<Integer, Set<File>> byYear = fileSystem.byYear();
            byYear.keySet().stream().sorted()
                    .forEach(key -> {
                        System.out.printf("Year: %d\n", key);
                        Set<File> files = byYear.get(key);
                        files.stream()
                                .sorted()
                                .forEach(System.out::println);
                    });
        } else if (action == 3) {
            System.out.println("== Size by month and day");
            Map<String, Long> byMonthAndDay = fileSystem.sizeByMonthAndDay();
            byMonthAndDay.keySet().stream().sorted()
                    .forEach(key -> System.out.printf("%s -> %d\n", key, byMonthAndDay.get(key)));
        }
        scanner.close();
    }
}