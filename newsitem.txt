import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.Stream;

class CategoryNotFoundException extends Exception{
    public CategoryNotFoundException(String message) {
            super(String.format("Category %s was not found\n", message));
    }
}
public class FrontPageTest {
    public static void main(String[] args) {
        // Reading
        Scanner scanner = new Scanner(System.in);
        String line = scanner.nextLine();
        String[] parts = line.split(" ");
        Category[] categories = new Category[parts.length];
        for (int i = 0; i < categories.length; ++i) {
            categories[i] = new Category(parts[i]);
        }
        int n = scanner.nextInt();
        scanner.nextLine();
        FrontPage frontPage = new FrontPage(categories);
        Calendar cal = Calendar.getInstance();
        for (int i = 0; i < n; ++i) {
            String title = scanner.nextLine();
            cal = Calendar.getInstance();
            int min = scanner.nextInt();
            cal.add(Calendar.MINUTE, -min);
            Date date = cal.getTime();
            scanner.nextLine();
            String text = scanner.nextLine();
            int categoryIndex = scanner.nextInt();
            scanner.nextLine();
            TextNewsItem tni = new TextNewsItem(title, date, categories[categoryIndex], text);
            frontPage.addNewsItem(tni);
        }

        n = scanner.nextInt();
        scanner.nextLine();
        for (int i = 0; i < n; ++i) {
            String title = scanner.nextLine();
            int min = scanner.nextInt();
            cal = Calendar.getInstance();
            cal.add(Calendar.MINUTE, -min);
            scanner.nextLine();
            Date date = cal.getTime();
            String url = scanner.nextLine();
            int views = scanner.nextInt();
            scanner.nextLine();
            int categoryIndex = scanner.nextInt();
            scanner.nextLine();
            MediaNewsItem mni = new MediaNewsItem(title, date, categories[categoryIndex], url, views);
            frontPage.addNewsItem(mni);
        }
        // Execution
        String category = scanner.nextLine();
        System.out.println(frontPage);
        for (Category c : categories) {
            System.out.println(frontPage.listByCategory(c).size());
        }
        try {
            System.out.println(frontPage.listByCategoryName(category).size());
        } catch (CategoryNotFoundException e) {
            System.out.println(e.getMessage());
        }
    }
}

abstract class NewsItem {
    String title;
    Date datePublish;
    Category category;

    public NewsItem(String title, Date datePublish, Category category) {
        this.title = title;
        this.datePublish = datePublish;
        this.category = category;
    }

    public String getTitle() {
        return title;
    }

    public Date getDatePublish() {
        return datePublish;
    }

    public Category getCategory() {
        return category;
    }

    abstract public String getTeaser();

    public long getMinutes(){
        Date date = new Date();
        long minutes = (date.getTime() - this.datePublish.getTime()) / (60 * 1000);

        return minutes;
    }
}

class Category{
    String name;

    public Category(String name) {
        this.name = name;
    }

    public boolean equals(Category other) {
        return this.name.equals(other.name);
    }

    public String getName() {
        return name;
    }
}

class TextNewsItem extends NewsItem{
    String text;

    public TextNewsItem(String title, Date datePublish, Category category, String text) {
        super(title, datePublish, category);
        this.text = text;
    }

    @Override
    public String getTeaser() {
        StringBuilder stringBuilder = new StringBuilder();

        String outputText = text;
        if (this.text.length() > 80)
            outputText = this.text.substring(0, 80);

        stringBuilder.append(this.title).append("\n");
        stringBuilder.append(this.getMinutes()).append("\n");
        stringBuilder.append(outputText).append("\n");

        return stringBuilder.toString();
    }
}

class MediaNewsItem extends NewsItem{
    String url;
    int views;

    public MediaNewsItem(String title, Date datePublish, Category category, String url, int views) {
        super(title, datePublish, category);
        this.url = url;
        this.views = views;
    }

    @Override
    public String getTeaser() {
        return this.title + "\n" +
                this.getMinutes() + "\n" +
                this.url + "\n" +
                this.views + "\n";
    }
}

class FrontPage {
    List<NewsItem> newsItems;
    Category[] categories;

    public FrontPage( Category[] categories) {
        this.newsItems = new ArrayList<>();
        this.categories = categories;
    }

    void addNewsItem(NewsItem newsItem){
        this.newsItems.add(newsItem);
    }

    List<NewsItem> listByCategory(Category category){
        return this.newsItems.stream().filter(item -> item.getCategory().equals(category)).collect(Collectors.toList());
    }

    List<NewsItem> listByCategoryName(String category) throws CategoryNotFoundException { // 1 2 3 4 5

        List<String> list = Arrays.stream(this.categories).map(Category::getName).collect(Collectors.toList());
        int index = list.indexOf(category);


        if (index == -1)
            throw new CategoryNotFoundException(category);

        Category target = Arrays.stream(this.categories).collect(Collectors.toList()).get(index);

        return this.newsItems.stream().filter(news -> news.getCategory().equals(target)).collect(Collectors.toList());
    }

    @Override
    public String toString() {
        StringBuilder stringBuilder = new StringBuilder();

        this.newsItems.stream().map(NewsItem::getTeaser).forEach(stringBuilder::append);

        return stringBuilder.toString();
    }
}