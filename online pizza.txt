import java.util.ArrayList;
import java.util.Optional;
import java.util.Scanner;
import java.util.stream.IntStream;

interface Item {

    boolean isPizza();

    int getPrice();

    String getType();

    int getCounter();
}

class InvalidExtraTypeException extends Exception {


}

class InvalidPizzaTypeException extends Exception {


}

enum ExtraType {
    Ketchup(0), Coke(1);
    private int product;
    private int cost;

    ExtraType(int product) {
        this.product = product;
        switch (product) {
            case 0 -> this.cost = 3;
            case 1 -> this.cost = 5;
        }
    }

    public int getProduct() {
        return product;
    }

    public int getCost() {
        return cost;
    }
}

enum PizzaType {
    Standard(0), Pepperoni(1), Vegetarian(8);
    private int product;
    private int cost;

    PizzaType(int product) {
        this.product = product;
        switch (product) {
            case 0 -> this.cost = 10;
            case 1 -> this.cost = 12;
            case 2 -> this.cost = 8;
        }
    }

    public int getProduct() {
        return product;
    }

    public int getCost() {
        return cost;
    }
}

class ExtraItem implements Item {
    private ExtraType product;
    private int counter = 0;

    public ExtraItem(String type) throws InvalidExtraTypeException {
        try {
            this.product = ExtraType.valueOf(type);
        } catch (IllegalArgumentException e) {
            throw new InvalidExtraTypeException();
        }
    }

    @Override
    public boolean isPizza() {
        return false;
    }

    @Override
    public int getPrice() {
        return 0;
    }

    @Override
    public String getType() {
        return null;
    }

    public void updateCounter() {
        this.counter += 1;
    }

    @Override
    public int getCounter() {
        return this.counter;
    }
}

class PizzaItem implements Item {
    private PizzaType product;
    private int counter = 0;

    public PizzaItem(String type) throws InvalidPizzaTypeException {
        try {
            this.product = PizzaType.valueOf(type);
        } catch (IllegalArgumentException e) {
            throw new InvalidPizzaTypeException();
        }
    }

    @Override
    public boolean isPizza() {
        return false;
    }

    @Override
    public int getPrice() {
        return 0;
    }

    @Override
    public String getType() {
        return null;
    }

    public void updateCounter() {
        this.counter += 1;
    }

    @Override
    public int getCounter() {
        return this.counter;
    }
}

class Order {
    Map<String, Item>
}

public class PizzaOrderTest {

    public static void main(String[] args) {
        Scanner jin = new Scanner(System.in);
        int k = jin.nextInt();
        if (k == 0) { //test Item
            try {
                String type = jin.next();
                String name = jin.next();
                Item item = null;
                if (type.equals("Pizza")) item = new PizzaItem(name);
                else item = new ExtraItem(name);
                System.out.println(item.getPrice());
            } catch (Exception e) {
                System.out.println(e.getClass().getSimpleName());
            }
        }
        if (k == 1) { // test simple order
            Order order = new Order();
            while (true) {
                try {
                    String type = jin.next();
                    String name = jin.next();
                    Item item = null;
                    if (type.equals("Pizza")) item = new PizzaItem(name);
                    else item = new ExtraItem(name);
                    if (!jin.hasNextInt()) break;
                    order.addItem(item, jin.nextInt());
                } catch (Exception e) {
                    System.out.println(e.getClass().getSimpleName());
                }
            }
            jin.next();
            System.out.println(order.getPrice());
            order.displayOrder();
            while (true) {
                try {
                    String type = jin.next();
                    String name = jin.next();
                    Item item = null;
                    if (type.equals("Pizza")) item = new PizzaItem(name);
                    else item = new ExtraItem(name);
                    if (!jin.hasNextInt()) break;
                    order.addItem(item, jin.nextInt());
                } catch (Exception e) {
                    System.out.println(e.getClass().getSimpleName());
                }
            }
            System.out.println(order.getPrice());
            order.displayOrder();
        }
        if (k == 2) { // test order with removing
            Order order = new Order();
            while (true) {
                try {
                    String type = jin.next();
                    String name = jin.next();
                    Item item = null;
                    if (type.equals("Pizza")) item = new PizzaItem(name);
                    else item = new ExtraItem(name);
                    if (!jin.hasNextInt()) break;
                    order.addItem(item, jin.nextInt());
                } catch (Exception e) {
                    System.out.println(e.getClass().getSimpleName());
                }
            }
            jin.next();
            System.out.println(order.getPrice());
            order.displayOrder();
            while (jin.hasNextInt()) {
                try {
                    int idx = jin.nextInt();
                    order.removeItem(idx);
                } catch (Exception e) {
                    System.out.println(e.getClass().getSimpleName());
                }
            }
            System.out.println(order.getPrice());
            order.displayOrder();
        }
        if (k == 3) { //test locking & exceptions
            Order order = new Order();
            try {
                order.lock();
            } catch (Exception e) {
                System.out.println(e.getClass().getSimpleName());
            }
            try {
                order.addItem(new ExtraItem("Coke"), 1);
            } catch (Exception e) {
                System.out.println(e.getClass().getSimpleName());
            }
            try {
                order.lock();
            } catch (Exception e) {
                System.out.println(e.getClass().getSimpleName());
            }
            try {
                order.removeItem(0);
            } catch (Exception e) {
                System.out.println(e.getClass().getSimpleName());
            }
        }
    }

}