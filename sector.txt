import java.util.*;

class Sector {
    String name;
    int size;
    HashMap<Integer, Integer> taken;
    int type;

    public Sector(String name, int size) {
        this.name = name;
        this.size = size;
        taken = new HashMap<Integer, Integer>();
        this.type = 0;
    }

    public void createSector() {
        for (int i = 1; i <= this.size; i++)
            this.taken.put(i, 0);
    }

    public void buySeat(int index) {
        this.taken.put(index, 1);
    }

    public HashMap<Integer, Integer> getTaken() {
        return taken;
    }

    public int countFreeSeats() {
        return (int) this.taken.values().stream()
                .filter(seat -> seat.equals(0))
                .count();
    }

    public double getPercentage() { //(12 / 100) * 100
        return (((double) this.size - countFreeSeats() ) / this.size) * 100;
    }

    public int getType() {
        return type;
    }

    public void setType(int type) {
        this.type = type;
    }

    public String getName() {
        return name;
    }

    @Override
    public String toString() {
        String format = String.format("%d/%d", countFreeSeats(), this.size);
        int x = this.size - countFreeSeats();
        return String.format("%s\\t%5s\\t%.1f%%", this.name, format, getPercentage());
    }
}

class Stadium {
    String name;
    Map<String, Sector> sectorsOnStadium;

    public Stadium(String name) {
        this.name = name;
        this.sectorsOnStadium = new HashMap<>();
    }

    void createSectors(String[] sectorNames, int[] sizes) {
        for (int i = 0; i < sectorNames.length; i++) {
            String name = sectorNames[i];
            int size = sizes[i];
            Sector sector = new Sector(name, size);
            sectorsOnStadium.put(sectorNames[i], sector);
            sector.createSector();
        }
    }

    void buyTicket(String sectorName, int seat, int type) throws SeatNotAllowedException, SeatTakenException {
        Sector sector = this.sectorsOnStadium.get(sectorName);
        if (sector.getType() == 0 && (type == 1 || type == 2)) {
            sector.setType(type);
        }

        HashMap<Integer, Integer> freeSeats = sector.getTaken();
        Integer isTaken = freeSeats.get(seat);
        if (isTaken == 1) {
            throw new SeatTakenException("");
        }

        if (sector.getType() != type && type != 0) {//0 2
            throw new SeatNotAllowedException("");
        }

        sector.buySeat(seat);
    }

    void showSectors() {
        this.sectorsOnStadium.values().stream()
                .sorted(Comparator.comparing(Sector::countFreeSeats).reversed().thenComparing(Sector::getName))
                .forEach(System.out::println);
    }
}

class SeatTakenException extends Exception {
    public SeatTakenException(String message) {
        super(message);
    }
}

class SeatNotAllowedException extends Exception {
    public SeatNotAllowedException(String message) {
        super(message);
    }
}

public class StaduimTest {
    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int n = scanner.nextInt();
        scanner.nextLine();
        String[] sectorNames = new String[n];
        int[] sectorSizes = new int[n];
        String name = scanner.nextLine();
        for (int i = 0; i < n; ++i) {
            String line = scanner.nextLine();
            String[] parts = line.split(";");
            sectorNames[i] = parts[0];
            sectorSizes[i] = Integer.parseInt(parts[1]);
        }
        Stadium stadium = new Stadium(name);
        stadium.createSectors(sectorNames, sectorSizes);
        n = scanner.nextInt();
        scanner.nextLine();
        for (int i = 0; i < n; ++i) {
            String line = scanner.nextLine();
            String[] parts = line.split(";");
            try {
                stadium.buyTicket(parts[0], Integer.parseInt(parts[1]),
                        Integer.parseInt(parts[2]));
            } catch (SeatNotAllowedException e) {
                System.out.println("SeatNotAllowedException");
            } catch (SeatTakenException e) {
                System.out.println("SeatTakenException");
            }
        }
        stadium.showSectors();
    }
}
