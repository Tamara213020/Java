import java.io.*;
import java.util.*;
import java.util.stream.Collectors;

class OperationNotAllowedException extends Exception {
    public OperationNotAllowedException(String message) {
        super(message);
    }
}

class Course { //Predmet
    String name;
    int grade;

    public Course(String name, int grade) {
        this.name = name;
        this.grade = grade;
    }

    public String getName() {
        return name;
    }

    public int getGrade() {
        return grade;
    }
}

class Term {
    List<Course> courses; //max 3
    int termIndex;

    public Term(int termIndex) {
        this.courses = new ArrayList<>();
        this.termIndex = termIndex;
    }

    public void insertCourseGrade(Course course) {
        this.courses.add(course);
    }

    public int getTermSize() {
        return courses.size();
    }

    public Double averageGradesPerTerm() {
        return (double) (this.courses.stream().mapToInt(Course::getGrade).sum() / this.courses.size());
    }

    public String detailedReport() {
        return String.format("Term %d\n", this.termIndex) +
                String.format("Courses: %d\n", this.courses.size()) +
                String.format("Average grade for term: %.2f\n", this.averageGradesPerTerm());
    }

    public List<String> coursesAttended() {
        return this.courses.stream().map(Course::getName).collect(Collectors.toList());
    }
}

class Student {
    String id;
    int yearsOfStudies;
    Map<Integer, Term> terms; //max 6 for 3 years and 8 for 4 years

    public Student(String id, int yearsOfStudies) {
        this.id = id;
        this.yearsOfStudies = yearsOfStudies;
        this.terms = new HashMap<>();
    }

    public int getYearsOfStudies() {
        return yearsOfStudies;
    }

    public Map<Integer, Term> getTerms() {
        return terms;
    }

    public List<Integer> getGrades() {
        List<Integer> grades = new ArrayList<>();
        for (Term term : this.terms.values()) {
            for (Course course : term.courses) {
                grades.add(course.getGrade());
            }
        }

        return grades;
    }

    public int numOfPassedExams(){
        List<Integer> grades = getGrades();

        int counter = (int) grades.stream().filter(grade -> grade > 5).count();

        return counter;
    }

    public boolean hasFacultyPassed() {
        int num = numOfPassedExams();
        int expectedPassedExams = this.yearsOfStudies * 2 * 3; // 3 years * 2 terms/year * 3 courses/term
        return num >= expectedPassedExams;
    }



    public Double averageGrade() {
        List<Integer> grades = getGrades();
        return grades.stream().mapToDouble(i -> (double) i).average().orElse(5);
    }

    public String graduateOutput() {
        return String.format("Student with ID %s graduated with average grade %.2f in %d years\n", this.id, this.averageGrade(), this.yearsOfStudies);
    }

    public List<String> coursesAttended() {
        return this.terms.values()
                .stream()
                .flatMap(term -> term.coursesAttended().stream()) // Stream of course names from each term
                .collect(Collectors.toList()); // Collect course names into a list
    }

    public String detailedReport() {
        StringBuilder stringBuilder = new StringBuilder();

        stringBuilder.append(String.format("Student: %s\n", this.id));
        for (Term term : this.terms.values()) {
            stringBuilder.append(term.detailedReport());
        }

        stringBuilder.append(String.format("Average grade for term: %.2f\n", this.averageGrade()));

        List<String> courses = coursesAttended();
        courses = courses.stream().sorted().collect(Collectors.toList());
        stringBuilder.append(String.format("Courses attended: %s", courses.get(0)));
        for (int i = 1; i < courses.size(); i++) {
            stringBuilder.append(String.format(",%s", courses.get(i)));
        }
        stringBuilder.append("\n");

        return stringBuilder.toString();
    }

    @Override
    public String toString() {
        return String.format("Student: %s Courses passed: %d Average grade: %.2f", this.id, this.numOfPassedExams(), this.averageGrade());
    }
}

class Faculty {
    Map<String, Student> students;

    public Faculty() {
        this.students = new TreeMap<>();
    }

    public void addStudent(String id, int yearsOfStudies) {
        this.students.putIfAbsent(id, new Student(id, yearsOfStudies));
    }

    void addGradeToStudent(String studentId, int termIndex, String courseName, int grade) throws OperationNotAllowedException {
        Course course = new Course(courseName, grade); //create course

        Student student = this.students.get(studentId); //take student

        student.getTerms().putIfAbsent(termIndex, new Term(termIndex)); //create term if it doesn't exist
        Term term = student.getTerms().get(termIndex); //take term

        if (term.getTermSize() == 3)
            throw new OperationNotAllowedException(String.format("Student %s already has 3 grades in term %d", studentId, termIndex));

        int yearsOfStudy = student.getYearsOfStudies();
        if (termIndex > yearsOfStudy * 2)
            throw new OperationNotAllowedException(String.format("Term %d is not possible for student with ID %s", termIndex, studentId));

        term.courses.add(course);
        student.terms.put(termIndex, term);
        this.students.put(studentId, student);
    }

    public String getFacultyLogs() {
        StringBuilder stringBuilder = new StringBuilder();
        List<Student> graduates = new ArrayList<>();
        for (Student student : this.students.values()){
            if (student.hasFacultyPassed())
                graduates.add(student);
        }
        graduates.forEach(student -> stringBuilder.append(student.graduateOutput()).append("\n")); // Append newline here

        System.out.println(graduates);
        return stringBuilder.toString();
    }


    public void printFirstNStudents(int n) {
        List<Student> topStudents = this.students.values().stream().collect(Collectors.toList());
        topStudents.stream().sorted(Comparator.comparing(Student::numOfPassedExams).thenComparing(Student::averageGrade).reversed()).limit(n).forEach(System.out::println);
    }

    public String getDetailedReportForStudent(String student1) {
        Student target = this.students.get(student1);
        return target.detailedReport();
    }

    public void printCourses() {


    }
}

public class FacultyTest {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int testCase = sc.nextInt();

        if (testCase == 1) {
            System.out.println("TESTING addStudent AND printFirstNStudents");
            Faculty faculty = new Faculty();
            for (int i = 0; i < 10; i++) {
                faculty.addStudent("student" + i, (i % 2 == 0) ? 3 : 4);
            }
            faculty.printFirstNStudents(10);

        } else if (testCase == 2) {
            System.out.println("TESTING addGrade and exception");
            Faculty faculty = new Faculty();
            faculty.addStudent("123", 3);
            faculty.addStudent("1234", 4);
            try {
                faculty.addGradeToStudent("123", 7, "NP", 10);
            } catch (OperationNotAllowedException e) {
                System.out.println(e.getMessage());
            }
            try {
                faculty.addGradeToStudent("1234", 9, "NP", 8);
            } catch (OperationNotAllowedException e) {
                System.out.println(e.getMessage());
            }
        } else if (testCase == 3) {
            System.out.println("TESTING addGrade and exception");
            Faculty faculty = new Faculty();
            faculty.addStudent("123", 3);
            faculty.addStudent("1234", 4);
            for (int i = 0; i < 4; i++) {
                try {
                    faculty.addGradeToStudent("123", 1, "course" + i, 10);
                } catch (OperationNotAllowedException e) {
                    System.out.println(e.getMessage());
                }
            }
            for (int i = 0; i < 4; i++) {
                try {
                    faculty.addGradeToStudent("1234", 1, "course" + i, 10);
                } catch (OperationNotAllowedException e) {
                    System.out.println(e.getMessage());
                }
            }
        } else if (testCase == 4) {
            System.out.println("Testing addGrade for graduation");
            Faculty faculty = new Faculty();
            faculty.addStudent("123", 3);
            faculty.addStudent("1234", 4);
            int counter = 1;
            for (int i = 1; i <= 6; i++) {
                for (int j = 1; j <= 3; j++) {
                    try {
                        faculty.addGradeToStudent("123", i, "course" + counter, (i % 2 == 0) ? 7 : 8);
                    } catch (OperationNotAllowedException e) {
                        System.out.println(e.getMessage());
                    }
                    ++counter;
                }
            }
            counter = 1;
            for (int i = 1; i <= 8; i++) {
                for (int j = 1; j <= 3; j++) {
                    try {
                        faculty.addGradeToStudent("1234", i, "course" + counter, (j % 2 == 0) ? 7 : 10);
                    } catch (OperationNotAllowedException e) {
                        System.out.println(e.getMessage());
                    }
                    ++counter;
                }
            }
            System.out.println("LOGS");
            System.out.println(faculty.getFacultyLogs());
            System.out.println("PRINT STUDENTS (there shouldn't be anything after this line!");
            faculty.printFirstNStudents(2);
        } else if (testCase == 5 || testCase == 6 || testCase == 7) {
            System.out.println("Testing addGrade and printFirstNStudents (not graduated student)");
            Faculty faculty = new Faculty();
            for (int i = 1; i <= 10; i++) {
                faculty.addStudent("student" + i, ((i % 2) == 1 ? 3 : 4));
                int courseCounter = 1;
                for (int j = 1; j < ((i % 2 == 1) ? 6 : 8); j++) {
                    for (int k = 1; k <= ((j % 2 == 1) ? 3 : 2); k++) {
                        try {
                            faculty.addGradeToStudent("student" + i, j, ("course" + courseCounter), i % 5 + 6);
                        } catch (OperationNotAllowedException e) {
                            System.out.println(e.getMessage());
                        }
                        ++courseCounter;
                    }
                }
            }
            if (testCase == 5)
                faculty.printFirstNStudents(10);
            else if (testCase == 6)
                faculty.printFirstNStudents(3);
            else
                faculty.printFirstNStudents(20);
        } else if (testCase == 8 || testCase == 9) {
            System.out.println("TESTING DETAILED REPORT");
            Faculty faculty = new Faculty();
            faculty.addStudent("student1", ((testCase == 8) ? 3 : 4));
            int grade = 6;
            int counterCounter = 1;
            for (int i = 1; i < ((testCase == 8) ? 6 : 8); i++) {
                for (int j = 1; j < 3; j++) {
                    try {
                        faculty.addGradeToStudent("student1", i, "course" + counterCounter, grade);
                    } catch (OperationNotAllowedException e) {
                        e.printStackTrace();
                    }
                    grade++;
                    if (grade == 10)
                        grade = 5;
                    ++counterCounter;
                }
            }
            System.out.println(faculty.getDetailedReportForStudent("student1"));
        } else if (testCase == 10) {
            System.out.println("TESTING PRINT COURSES");
            Faculty faculty = new Faculty();
            for (int i = 1; i <= 10; i++) {
                faculty.addStudent("student" + i, ((i % 2) == 1 ? 3 : 4));
                int courseCounter = 1;
                for (int j = 1; j < ((i % 2 == 1) ? 6 : 8); j++) {
                    for (int k = 1; k <= ((j % 2 == 1) ? 3 : 2); k++) {
                        int grade = sc.nextInt();
                        try {
                            faculty.addGradeToStudent("student" + i, j, ("course" + courseCounter), grade);
                        } catch (OperationNotAllowedException e) {
                            System.out.println(e.getMessage());
                        }
                        ++courseCounter;
                    }
                }
            }
            faculty.printCourses();
        } else if (testCase == 11) {
            System.out.println("INTEGRATION TEST");
            Faculty faculty = new Faculty();
            for (int i = 1; i <= 10; i++) {
                faculty.addStudent("student" + i, ((i % 2) == 1 ? 3 : 4));
                int courseCounter = 1;
                for (int j = 1; j <= ((i % 2 == 1) ? 6 : 8); j++) {
                    for (int k = 1; k <= ((j % 2 == 1) ? 2 : 3); k++) {
                        int grade = sc.nextInt();
                        try {
                            faculty.addGradeToStudent("student" + i, j, ("course" + courseCounter), grade);
                        } catch (OperationNotAllowedException e) {
                            System.out.println(e.getMessage());
                        }
                        ++courseCounter;
                    }
                }

            }

            for (int i = 11; i < 15; i++) {
                faculty.addStudent("student" + i, ((i % 2) == 1 ? 3 : 4));
                int courseCounter = 1;
                for (int j = 1; j <= ((i % 2 == 1) ? 6 : 8); j++) {
                    for (int k = 1; k <= 3; k++) {
                        int grade = sc.nextInt();
                        try {
                            faculty.addGradeToStudent("student" + i, j, ("course" + courseCounter), grade);
                        } catch (OperationNotAllowedException e) {
                            System.out.println(e.getMessage());
                        }
                        ++courseCounter;
                    }
                }
            }
            System.out.println("LOGS");
            System.out.println(faculty.getFacultyLogs());
            System.out.println("DETAILED REPORT FOR STUDENT");
            System.out.println(faculty.getDetailedReportForStudent("student2"));
            try {
                System.out.println(faculty.getDetailedReportForStudent("student11"));
                System.out.println("The graduated students should be deleted!!!");
            } catch (NullPointerException e) {
                System.out.println("The graduated students are really deleted");
            }
            System.out.println("FIRST N STUDENTS");
            faculty.printFirstNStudents(10);
            System.out.println("COURSES");
            faculty.printCourses();
        }
    }
}