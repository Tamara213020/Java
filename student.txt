import java.util.*;
import java.util.stream.Collectors;

public class LabExercisesTest {

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        LabExercises labExercises = new LabExercises();
        while (sc.hasNextLine()) {
            String input = sc.nextLine();
            String[] parts = input.split("\\s+");
            String index = parts[0];
            List<Integer> points = Arrays.stream(parts).skip(1)
                    .mapToInt(Integer::parseInt)
                    .boxed()
                    .collect(Collectors.toList());

            labExercises.addStudent(new Student(index, points));
        }

        System.out.println("===printByAveragePoints (ascending)===");
        labExercises.printByAveragePoints(true, 100);
        System.out.println("===printByAveragePoints (descending)===");
        labExercises.printByAveragePoints(false, 100);
        System.out.println("===failed students===");
        labExercises.failedStudents().forEach(System.out::println);
        System.out.println("===statistics by year");
        labExercises.getStatisticsByYear().entrySet().stream()
                .map(entry -> String.format("%d : %.2f", entry.getKey(), entry.getValue()))
                .forEach(System.out::println);

    }
}

class Student {
    String index;
    List<Integer> points;

    public Student(String index, List<Integer> points) {
        this.index = index;
        this.points = points;
    }
    public double sumPoints(){
        int sum = this.points.stream().mapToInt(i -> i).sum();
        return (double) sum / 10;
    }

    public boolean hasPassed(){
        return this.points.size() > 7;
    }

    public String getIndex() {
        return index;
    }

    public int getYear(){
        return 20 - Integer.parseInt(this.index.substring(0, 2));
    }

    @Override
    public String toString() {
        return String.format("%s %s %.2f", this.index, this.hasPassed() ? "YES" : "NO", this.sumPoints());
    }
}

class LabExercises {
    Set<Student> students;

    public LabExercises() {
        this.students = new HashSet<>();
    }

    public void addStudent (Student student){
        this.students.add(student);
    }

    public void printByAveragePoints (boolean ascending, int n){
        if (ascending)
            this.students.stream().sorted(Comparator.comparing(Student::sumPoints).thenComparing(Student::getIndex)).limit(n).forEach(System.out::println);
        else this.students.stream().sorted(Comparator.comparing(Student::sumPoints).thenComparing(Student::getIndex).reversed()).limit(n).forEach(System.out::println);
    }

    public List<Student> failedStudents (){
        return this.students.stream().filter(student -> !student.hasPassed()).sorted(Comparator.comparing(Student::getIndex).thenComparing(Student::sumPoints)).collect(Collectors.toList());
    }

    public Map<Integer,Double> getStatisticsByYear(){ //15 List<Student>
        return this.students.stream().filter(Student::hasPassed).collect(Collectors.groupingBy(
                Student::getYear, // key
                Collectors.averagingDouble(Student::sumPoints) // value
        ));
    }
}