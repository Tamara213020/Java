import java.io.*;
import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;
import java.util.Scanner;

class UnsupportedFormatException extends Exception {
    public UnsupportedFormatException(String message) {
        super(message);
    }
}

class InvalidTimeException extends Exception {
    public InvalidTimeException(String message) {
        super(message);
    }
}

class Time {
    int hours;
    int minutes;

    public Time(String time) throws UnsupportedFormatException, InvalidTimeException {
        if (time.contains(":")) {
            String[] parts = time.split(":");
            this.hours = Integer.parseInt(parts[0]);
            this.minutes = Integer.parseInt(parts[1]);
        } else if (time.contains(".")) {
            String[] parts = time.split("\\.");
            this.hours = Integer.parseInt(parts[0]);
            this.minutes = Integer.parseInt(parts[1]);
        } else throw new UnsupportedFormatException(time);

        if (checkForException())
            throw new InvalidTimeException(time);
    }

    public boolean checkForException() {
        if ((this.hours > 24 || this.hours < 0) || (this.minutes > 60 || this.minutes < 0))
            return true;
        else return false;
    }

    public int getHours() {
        return hours;
    }

    public int getMinutes() {
        return minutes;
    }

    public String print24() {
        if (this.minutes != 0)
        return String.format("%2d:%2d", this.hours, this.minutes);
        else return String.format("%2d:0%d", this.hours, this.minutes);
    }

    public String print12(int h, int m, String str) {
        if (m == 0)
            return String.format("%2d:0%d %s", h, m, str.toUpperCase());
        else return String.format("%2d:%2d %s", h, m, str.toUpperCase());
    }

    public String transform12() {
        if (this.hours == 0) {
            return print12(12, this.minutes, " AM");
        } else if (this.hours >= 1 && this.hours <= 11) {
            return print12(this.hours, this.minutes, "AM");
        } else if (this.hours == 12){
            return print12(this.hours, this.minutes, "PM");
        } else {
            return print12(this.hours - 12, this.minutes, "PM");
        }
    }
}

class TimeTable {
    List<Time> times;

    public TimeTable() {
        this.times = new ArrayList<>();
    }

    void readTimes(InputStream inputStream) throws UnsupportedFormatException, InvalidTimeException {
        Scanner scanner = new Scanner(inputStream);
        while (scanner.hasNextLine()) {
            String line = scanner.nextLine();
            String[] parts = line.split(" ");
            for (String part : parts) {
                Time time = new Time(part);
                this.times.add(time);
            }
        }
    }

    public void writeTimes(PrintStream out, TimeFormat timeFormat) {
        PrintWriter printWriter = new PrintWriter(out);
        if (timeFormat.toString().equalsIgnoreCase("FORMAT_24")) {
            this.times.stream().sorted(Comparator.comparing(Time::getHours).thenComparing(Time::getMinutes)).forEach(time -> {
                printWriter.println(time.print24());
            });

        } else {
            this.times.stream().sorted(Comparator.comparing(Time::getHours).thenComparing(Time::getMinutes)).forEach(time ->{
                printWriter.println(time.transform12());
            });
        }

        printWriter.flush();
    }
}

public class TimesTest {

    public static void main(String[] args) {
        TimeTable timeTable = new TimeTable();
        try {
            timeTable.readTimes(System.in);
        } catch (UnsupportedFormatException e) {
            System.out.println("UnsupportedFormatException: " + e.getMessage());
        } catch (InvalidTimeException e) {
            System.out.println("InvalidTimeException: " + e.getMessage());
        }
        System.out.println("24 HOUR FORMAT");
        timeTable.writeTimes(System.out, TimeFormat.FORMAT_24);
        System.out.println("AM/PM FORMAT");
        timeTable.writeTimes(System.out, TimeFormat.FORMAT_AMPM);
    }

}

enum TimeFormat {
    FORMAT_24, FORMAT_AMPM
}